// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeedData.Models;

#nullable disable

namespace SeedData.Migrations
{
    [DbContext(typeof(ImdbContext))]
    [Migration("20251008085459_step_1_no_changes")]
    partial class step_1_no_changes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SeedData.Models.NameBasic", b =>
                {
                    b.Property<double?>("BirthYear")
                        .HasColumnType("double")
                        .HasColumnName("birthYear");

                    b.Property<double?>("DeathYear")
                        .HasColumnType("double")
                        .HasColumnName("deathYear");

                    b.Property<string>("Nconst")
                        .HasColumnType("text")
                        .HasColumnName("nconst");

                    b.Property<string>("PrimaryName")
                        .HasColumnType("text")
                        .HasColumnName("primaryName");

                    b.ToTable("name_basics", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleAkas", b =>
                {
                    b.Property<int>("IdAkas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_akas");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAkas"));

                    b.Property<sbyte>("IsOriginalTitle")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_original_title");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("language");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("region");

                    b.Property<string>("Tconst")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tconst");

                    b.HasKey("IdAkas")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Tconst" }, "fk_title_akas_title_basics_idx");

                    b.ToTable("title_akas", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleAttribute", b =>
                {
                    b.Property<int>("IdAttribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_attribute");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAttribute"));

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("attribute");

                    b.HasKey("IdAttribute")
                        .HasName("PRIMARY");

                    b.ToTable("title_attributes", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleBasic", b =>
                {
                    b.Property<string>("Tconst")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tconst");

                    b.Property<DateOnly?>("EndYear")
                        .HasColumnType("date")
                        .HasColumnName("end_year");

                    b.Property<sbyte>("IsAdult")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_adult");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("original_title");

                    b.Property<string>("PrimaryTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("primary_title");

                    b.Property<int?>("RuntimeMinutes")
                        .HasColumnType("int")
                        .HasColumnName("runtime_minutes");

                    b.Property<DateOnly>("StartYear")
                        .HasColumnType("date")
                        .HasColumnName("start_year");

                    b.Property<string>("TitleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title_type");

                    b.HasKey("Tconst")
                        .HasName("PRIMARY");

                    b.ToTable("title_basics", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleComment", b =>
                {
                    b.Property<int>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_comment");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdComment"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<string>("Tconst")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tconst");

                    b.HasKey("IdComment")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Tconst" }, "fk_title_comments_title_basics1_idx");

                    b.ToTable("title_comments", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleEpisode", b =>
                {
                    b.Property<string>("ParentTconst")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("parent_tconst");

                    b.Property<string>("Tconst")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tconst");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int")
                        .HasColumnName("episode_number");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int")
                        .HasColumnName("season_number");

                    b.HasKey("ParentTconst", "Tconst")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "Tconst" }, "fk_title_episodes_title_basics1");

                    b.HasIndex(new[] { "ParentTconst" }, "fk_title_episodes_title_basics2_idx");

                    b.ToTable("title_episodes", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleGenre", b =>
                {
                    b.Property<int>("IdGenre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_genre");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdGenre"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("genre");

                    b.HasKey("IdGenre")
                        .HasName("PRIMARY");

                    b.ToTable("title_genres", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleRating", b =>
                {
                    b.Property<int>("IdRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_rating");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRating"));

                    b.Property<double>("AverageRating")
                        .HasColumnType("double")
                        .HasColumnName("average_rating");

                    b.Property<int>("NumVotes")
                        .HasColumnType("int")
                        .HasColumnName("num_votes");

                    b.Property<string>("Tconst")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tconst");

                    b.HasKey("IdRating")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Tconst" }, "fk_title_ratings_title_basics1");

                    b.ToTable("title_ratings", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleType", b =>
                {
                    b.Property<int>("IdTypes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_types");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTypes"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.HasKey("IdTypes")
                        .HasName("PRIMARY");

                    b.ToTable("title_types", (string)null);
                });

            modelBuilder.Entity("TitleAkasAttribute", b =>
                {
                    b.Property<int>("IdAttribute")
                        .HasColumnType("int")
                        .HasColumnName("id_attribute");

                    b.Property<int>("IdAkas")
                        .HasColumnType("int")
                        .HasColumnName("id_akas");

                    b.HasKey("IdAttribute", "IdAkas")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdAkas" }, "fk_title_attributes_has_title_akas_title_akas1_idx");

                    b.HasIndex(new[] { "IdAttribute" }, "fk_title_attributes_has_title_akas_title_attributes1_idx");

                    b.ToTable("title_akas_attributes", (string)null);
                });

            modelBuilder.Entity("TitleAkasType", b =>
                {
                    b.Property<int>("IdTypes")
                        .HasColumnType("int")
                        .HasColumnName("id_types");

                    b.Property<int>("IdAkas")
                        .HasColumnType("int")
                        .HasColumnName("id_akas");

                    b.HasKey("IdTypes", "IdAkas")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdAkas" }, "fk_title_types_has_title_akas_title_akas1_idx");

                    b.HasIndex(new[] { "IdTypes" }, "fk_title_types_has_title_akas_title_types1_idx");

                    b.ToTable("title_akas_types", (string)null);
                });

            modelBuilder.Entity("TitleBasicsGenre", b =>
                {
                    b.Property<int>("IdGenre")
                        .HasColumnType("int")
                        .HasColumnName("id_genre");

                    b.Property<string>("Tconst")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tconst");

                    b.HasKey("IdGenre", "Tconst")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "Tconst" }, "fk_title_genres_has_title_basics_title_basics1_idx");

                    b.HasIndex(new[] { "IdGenre" }, "fk_title_genres_has_title_basics_title_genres1_idx");

                    b.ToTable("title_basics_genres", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.TitleAkas", b =>
                {
                    b.HasOne("SeedData.Models.TitleBasic", "TconstNavigation")
                        .WithMany("TitleAkas")
                        .HasForeignKey("Tconst")
                        .IsRequired()
                        .HasConstraintName("fk_title_akas_title_basics");

                    b.Navigation("TconstNavigation");
                });

            modelBuilder.Entity("SeedData.Models.TitleComment", b =>
                {
                    b.HasOne("SeedData.Models.TitleBasic", "TconstNavigation")
                        .WithMany("TitleComments")
                        .HasForeignKey("Tconst")
                        .IsRequired()
                        .HasConstraintName("fk_title_comments_title_basics1");

                    b.Navigation("TconstNavigation");
                });

            modelBuilder.Entity("SeedData.Models.TitleEpisode", b =>
                {
                    b.HasOne("SeedData.Models.TitleBasic", "ParentTconstNavigation")
                        .WithMany("TitleEpisodeParentTconstNavigations")
                        .HasForeignKey("ParentTconst")
                        .IsRequired()
                        .HasConstraintName("fk_title_episodes_title_basics2");

                    b.HasOne("SeedData.Models.TitleBasic", "TconstNavigation")
                        .WithMany("TitleEpisodeTconstNavigations")
                        .HasForeignKey("Tconst")
                        .IsRequired()
                        .HasConstraintName("fk_title_episodes_title_basics1");

                    b.Navigation("ParentTconstNavigation");

                    b.Navigation("TconstNavigation");
                });

            modelBuilder.Entity("SeedData.Models.TitleRating", b =>
                {
                    b.HasOne("SeedData.Models.TitleBasic", "TconstNavigation")
                        .WithMany("TitleRatings")
                        .HasForeignKey("Tconst")
                        .IsRequired()
                        .HasConstraintName("fk_title_ratings_title_basics1");

                    b.Navigation("TconstNavigation");
                });

            modelBuilder.Entity("TitleAkasAttribute", b =>
                {
                    b.HasOne("SeedData.Models.TitleAkas", null)
                        .WithMany()
                        .HasForeignKey("IdAkas")
                        .IsRequired()
                        .HasConstraintName("fk_title_attributes_has_title_akas_title_akas1");

                    b.HasOne("SeedData.Models.TitleAttribute", null)
                        .WithMany()
                        .HasForeignKey("IdAttribute")
                        .IsRequired()
                        .HasConstraintName("fk_title_attributes_has_title_akas_title_attributes1");
                });

            modelBuilder.Entity("TitleAkasType", b =>
                {
                    b.HasOne("SeedData.Models.TitleAkas", null)
                        .WithMany()
                        .HasForeignKey("IdAkas")
                        .IsRequired()
                        .HasConstraintName("fk_title_types_has_title_akas_title_akas1");

                    b.HasOne("SeedData.Models.TitleType", null)
                        .WithMany()
                        .HasForeignKey("IdTypes")
                        .IsRequired()
                        .HasConstraintName("fk_title_types_has_title_akas_title_types1");
                });

            modelBuilder.Entity("TitleBasicsGenre", b =>
                {
                    b.HasOne("SeedData.Models.TitleGenre", null)
                        .WithMany()
                        .HasForeignKey("IdGenre")
                        .IsRequired()
                        .HasConstraintName("fk_title_genres_has_title_basics_title_genres1");

                    b.HasOne("SeedData.Models.TitleBasic", null)
                        .WithMany()
                        .HasForeignKey("Tconst")
                        .IsRequired()
                        .HasConstraintName("fk_title_genres_has_title_basics_title_basics1");
                });

            modelBuilder.Entity("SeedData.Models.TitleBasic", b =>
                {
                    b.Navigation("TitleAkas");

                    b.Navigation("TitleComments");

                    b.Navigation("TitleEpisodeParentTconstNavigations");

                    b.Navigation("TitleEpisodeTconstNavigations");

                    b.Navigation("TitleRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
