// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeedData.Models;

#nullable disable

namespace SeedData.Migrations
{
    [DbContext(typeof(ImdbContext))]
    [Migration("20251015182639_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AliasesHasAttribute", b =>
                {
                    b.Property<byte[]>("AliasesAliasId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Aliases_alias_id");

                    b.Property<byte[]>("AttributesAttributeId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Attributes_attribute_id");

                    b.HasKey("AliasesAliasId", "AttributesAttributeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AliasesAliasId" }, "fk_Aliases_has_Attributes_Aliases1_idx");

                    b.HasIndex(new[] { "AttributesAttributeId" }, "fk_Aliases_has_Attributes_Attributes1_idx");

                    b.ToTable("Aliases_has_Attributes", (string)null);
                });

            modelBuilder.Entity("AliasesHasType", b =>
                {
                    b.Property<byte[]>("AliasesAliasId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Aliases_alias_id");

                    b.Property<byte[]>("TypesTypeId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Types_type_id");

                    b.HasKey("AliasesAliasId", "TypesTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AliasesAliasId" }, "fk_Aliases_has_Types_Aliases1_idx");

                    b.HasIndex(new[] { "TypesTypeId" }, "fk_Aliases_has_Types_Types1_idx");

                    b.ToTable("Aliases_has_Types", (string)null);
                });

            modelBuilder.Entity("Director", b =>
                {
                    b.Property<byte[]>("TitlesTitleId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Titles_title_id");

                    b.Property<byte[]>("PersonsPersonId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Persons_person_id");

                    b.HasKey("TitlesTitleId", "PersonsPersonId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PersonsPersonId" }, "fk_Titles_has_Persons_Persons1_idx");

                    b.HasIndex(new[] { "TitlesTitleId" }, "fk_Titles_has_Persons_Titles1_idx");

                    b.ToTable("Directors", (string)null);
                });

            modelBuilder.Entity("KnownFor", b =>
                {
                    b.Property<byte[]>("TitlesTitleId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Titles_title_id");

                    b.Property<byte[]>("PersonsPersonId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Persons_person_id");

                    b.HasKey("TitlesTitleId", "PersonsPersonId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PersonsPersonId" }, "fk_Titles_has_Persons_Persons2_idx");

                    b.HasIndex(new[] { "TitlesTitleId" }, "fk_Titles_has_Persons_Titles2_idx");

                    b.ToTable("Known_for", (string)null);
                });

            modelBuilder.Entity("SeedData.Models.Actor", b =>
                {
                    b.Property<byte[]>("TitlesTitleId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Titles_title_id");

                    b.Property<byte[]>("PersonsPersonId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Persons_person_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TitlesTitleId", "PersonsPersonId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PersonsPersonId" }, "fk_Titles_has_Persons_Persons3_idx");

                    b.HasIndex(new[] { "TitlesTitleId" }, "fk_Titles_has_Persons_Titles3_idx");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("SeedData.Models.Alias", b =>
                {
                    b.Property<byte[]>("AliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("alias_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<bool>("IsOriginalTitle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_original_title");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("language");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("region");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<byte[]>("TitleId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("title_id");

                    b.HasKey("AliasId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TitleId" }, "fk_title_akas_title_basics_idx");

                    b.HasIndex(new[] { "Title" }, "title_index");

                    b.ToTable("Aliases");
                });

            modelBuilder.Entity("SeedData.Models.Attribute", b =>
                {
                    b.Property<byte[]>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("attribute_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<string>("Attribute1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("attribute");

                    b.HasKey("AttributeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Attribute1" }, "attribute_UNIQUE")
                        .IsUnique();

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("SeedData.Models.Comment", b =>
                {
                    b.Property<byte[]>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("comment_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<byte[]>("TitleId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("title_id");

                    b.HasKey("CommentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TitleId" }, "fk_title_comments_title_basics1_idx");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SeedData.Models.Episode", b =>
                {
                    b.Property<byte[]>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("episode_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int")
                        .HasColumnName("episode_number");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int")
                        .HasColumnName("season_number");

                    b.Property<byte[]>("TitleIdChild")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("title_id_child");

                    b.Property<byte[]>("TitleIdParent")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("title_id_parent");

                    b.HasKey("EpisodeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TitleIdParent" }, "fk_title_episodes_title_basics1");

                    b.HasIndex(new[] { "TitleIdChild" }, "fk_title_episodes_title_basics2_idx");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("SeedData.Models.Genre", b =>
                {
                    b.Property<byte[]>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("genre_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<string>("Genre1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("genre");

                    b.HasKey("GenreId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Genre1" }, "genre_UNIQUE")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("SeedData.Models.Logging", b =>
                {
                    b.Property<byte[]>("LoggingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("logging_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("enum('INSERT','UPDATE','DELETE')")
                        .HasColumnName("command");

                    b.Property<DateTime>("ExecutedAt")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("executed_at")
                        .HasDefaultValueSql("now(6)");

                    b.Property<string>("ExecutedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("executed_by");

                    b.Property<string>("NewValue")
                        .HasColumnType("json")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .HasColumnType("json")
                        .HasColumnName("old_value");

                    b.Property<byte[]>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("table_name");

                    b.HasKey("LoggingId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExecutedAt" }, "executed_at_index");

                    b.HasIndex(new[] { "TableName" }, "table_name_index");

                    b.ToTable("Loggings");
                });

            modelBuilder.Entity("SeedData.Models.Person", b =>
                {
                    b.Property<byte[]>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("person_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<short>("BirthYear")
                        .HasColumnType("year")
                        .HasColumnName("birth_year");

                    b.Property<short?>("EndYear")
                        .HasColumnType("year")
                        .HasColumnName("end_year");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PersonId")
                        .HasName("PRIMARY");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SeedData.Models.Profession", b =>
                {
                    b.Property<byte[]>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("profession_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<byte[]>("PersonId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("person_id");

                    b.Property<string>("Profession1")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("profession");

                    b.HasKey("ProfessionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PersonId" }, "fk_Professions_Persons1_idx");

                    b.HasIndex(new[] { "Profession1" }, "profession_UNIQUE")
                        .IsUnique();

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("SeedData.Models.Rating", b =>
                {
                    b.Property<byte[]>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("rating_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double")
                        .HasColumnName("average_rating");

                    b.Property<int>("NumVotes")
                        .HasColumnType("int")
                        .HasColumnName("num_votes");

                    b.Property<byte[]>("TitleId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("title_id");

                    b.HasKey("RatingId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TitleId" }, "fk_title_ratings_title_basics1");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SeedData.Models.Title", b =>
                {
                    b.Property<byte[]>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("title_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<short?>("EndYear")
                        .HasColumnType("year")
                        .HasColumnName("end_year");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_adult");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("original_title");

                    b.Property<string>("PrimaryTitle")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("primary_title");

                    b.Property<int?>("RuntimeMinutes")
                        .HasColumnType("int")
                        .HasColumnName("runtime_minutes");

                    b.Property<short>("StartYear")
                        .HasColumnType("year")
                        .HasColumnName("start_year");

                    b.Property<string>("TitleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title_type");

                    b.HasKey("TitleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OriginalTitle" }, "original_title_index");

                    b.HasIndex(new[] { "PrimaryTitle" }, "primary_title_index");

                    b.HasIndex(new[] { "TitleType" }, "title_type_index");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("SeedData.Models.Type", b =>
                {
                    b.Property<byte[]>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("type_id")
                        .HasDefaultValueSql("uuid_to_bin(uuid(),1)");

                    b.Property<string>("Type1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.HasKey("TypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Type1" }, "type_UNIQUE")
                        .IsUnique();

                    b.ToTable("Types");
                });

            modelBuilder.Entity("TitlesHasGenre", b =>
                {
                    b.Property<byte[]>("TitlesTitleId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Titles_title_id");

                    b.Property<byte[]>("GenresGenreId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Genres_genre_id");

                    b.HasKey("TitlesTitleId", "GenresGenreId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GenresGenreId" }, "fk_Titles_has_Genres_Genres1_idx");

                    b.HasIndex(new[] { "TitlesTitleId" }, "fk_Titles_has_Genres_Titles1_idx");

                    b.ToTable("Titles_has_Genres", (string)null);
                });

            modelBuilder.Entity("Writer", b =>
                {
                    b.Property<byte[]>("TitlesTitleId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Titles_title_id");

                    b.Property<byte[]>("PersonsPersonId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("Persons_person_id");

                    b.HasKey("TitlesTitleId", "PersonsPersonId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PersonsPersonId" }, "fk_Titles_has_Persons_Persons4_idx");

                    b.HasIndex(new[] { "TitlesTitleId" }, "fk_Titles_has_Persons_Titles4_idx");

                    b.ToTable("Writers", (string)null);
                });

            modelBuilder.Entity("AliasesHasAttribute", b =>
                {
                    b.HasOne("SeedData.Models.Alias", null)
                        .WithMany()
                        .HasForeignKey("AliasesAliasId")
                        .IsRequired()
                        .HasConstraintName("fk_Aliases_has_Attributes_Aliases1");

                    b.HasOne("SeedData.Models.Attribute", null)
                        .WithMany()
                        .HasForeignKey("AttributesAttributeId")
                        .IsRequired()
                        .HasConstraintName("fk_Aliases_has_Attributes_Attributes1");
                });

            modelBuilder.Entity("AliasesHasType", b =>
                {
                    b.HasOne("SeedData.Models.Alias", null)
                        .WithMany()
                        .HasForeignKey("AliasesAliasId")
                        .IsRequired()
                        .HasConstraintName("fk_Aliases_has_Types_Aliases1");

                    b.HasOne("SeedData.Models.Type", null)
                        .WithMany()
                        .HasForeignKey("TypesTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_Aliases_has_Types_Types1");
                });

            modelBuilder.Entity("Director", b =>
                {
                    b.HasOne("SeedData.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsPersonId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Persons1");

                    b.HasOne("SeedData.Models.Title", null)
                        .WithMany()
                        .HasForeignKey("TitlesTitleId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Titles1");
                });

            modelBuilder.Entity("KnownFor", b =>
                {
                    b.HasOne("SeedData.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsPersonId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Persons2");

                    b.HasOne("SeedData.Models.Title", null)
                        .WithMany()
                        .HasForeignKey("TitlesTitleId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Titles2");
                });

            modelBuilder.Entity("SeedData.Models.Actor", b =>
                {
                    b.HasOne("SeedData.Models.Title", "PersonsPerson")
                        .WithMany("Actors")
                        .HasForeignKey("PersonsPersonId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Persons3");

                    b.HasOne("SeedData.Models.Person", "TitlesTitle")
                        .WithMany("Actors")
                        .HasForeignKey("TitlesTitleId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Titles3");

                    b.Navigation("PersonsPerson");

                    b.Navigation("TitlesTitle");
                });

            modelBuilder.Entity("SeedData.Models.Alias", b =>
                {
                    b.HasOne("SeedData.Models.Title", "TitleNavigation")
                        .WithMany("Aliases")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("fk_title_akas_title_basics");

                    b.Navigation("TitleNavigation");
                });

            modelBuilder.Entity("SeedData.Models.Comment", b =>
                {
                    b.HasOne("SeedData.Models.Title", "Title")
                        .WithMany("Comments")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("fk_title_comments_title_basics1");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("SeedData.Models.Episode", b =>
                {
                    b.HasOne("SeedData.Models.Title", "TitleIdChildNavigation")
                        .WithMany("EpisodeTitleIdChildNavigations")
                        .HasForeignKey("TitleIdChild")
                        .IsRequired()
                        .HasConstraintName("fk_title_episodes_title_basics2");

                    b.HasOne("SeedData.Models.Title", "TitleIdParentNavigation")
                        .WithMany("EpisodeTitleIdParentNavigations")
                        .HasForeignKey("TitleIdParent")
                        .IsRequired()
                        .HasConstraintName("fk_title_episodes_title_basics1");

                    b.Navigation("TitleIdChildNavigation");

                    b.Navigation("TitleIdParentNavigation");
                });

            modelBuilder.Entity("SeedData.Models.Profession", b =>
                {
                    b.HasOne("SeedData.Models.Person", "Person")
                        .WithMany("Professions")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("fk_Professions_Persons1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SeedData.Models.Rating", b =>
                {
                    b.HasOne("SeedData.Models.Title", "Title")
                        .WithMany("Ratings")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("fk_title_ratings_title_basics1");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("TitlesHasGenre", b =>
                {
                    b.HasOne("SeedData.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Genres_Genres1");

                    b.HasOne("SeedData.Models.Title", null)
                        .WithMany()
                        .HasForeignKey("TitlesTitleId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Genres_Titles1");
                });

            modelBuilder.Entity("Writer", b =>
                {
                    b.HasOne("SeedData.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsPersonId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Persons4");

                    b.HasOne("SeedData.Models.Title", null)
                        .WithMany()
                        .HasForeignKey("TitlesTitleId")
                        .IsRequired()
                        .HasConstraintName("fk_Titles_has_Persons_Titles4");
                });

            modelBuilder.Entity("SeedData.Models.Person", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Professions");
                });

            modelBuilder.Entity("SeedData.Models.Title", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Aliases");

                    b.Navigation("Comments");

                    b.Navigation("EpisodeTitleIdChildNavigations");

                    b.Navigation("EpisodeTitleIdParentNavigations");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
