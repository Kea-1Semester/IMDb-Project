// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SeedData.Models;

public partial class ImdbContext : DbContext
{
    public ImdbContext(DbContextOptions<ImdbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actor> Actors { get; set; }

    public virtual DbSet<Alias> Aliases { get; set; }

    public virtual DbSet<AliasesHasAttribute> AliasesHasAttributes { get; set; }

    public virtual DbSet<AliasesHasType> AliasesHasTypes { get; set; }

    public virtual DbSet<Attribute> Attributes { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Director> Directors { get; set; }

    public virtual DbSet<Episode> Episodes { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<KnownFor> KnownFors { get; set; }

    public virtual DbSet<Logging> Loggings { get; set; }

    public virtual DbSet<Person> Persons { get; set; }

    public virtual DbSet<Profession> Professions { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Title> Titles { get; set; }

    public virtual DbSet<TitlesHasGenre> TitlesHasGenres { get; set; }

    public virtual DbSet<Type> Types { get; set; }

    public virtual DbSet<Writer> Writers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb3_general_ci")
            .HasCharSet("utf8mb3");

        modelBuilder.Entity<Actor>(entity =>
        {
            entity.HasKey(e => new { e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.Actors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons3");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.Actors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles3");
        });

        modelBuilder.Entity<Alias>(entity =>
        {
            entity.HasKey(e => e.AliasId).HasName("PRIMARY");

            entity.Property(e => e.AliasId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");

            entity.HasOne(d => d.TitleNavigation).WithMany(p => p.Aliases)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_akas_title_basics");
        });

        modelBuilder.Entity<AliasesHasAttribute>(entity =>
        {
            entity.HasKey(e => new { e.AliasesAliasId, e.AttributesAttributeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.AliasesAlias).WithMany(p => p.AliasesHasAttributes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Aliases_has_Attributes_Aliases1");

            entity.HasOne(d => d.AttributesAttribute).WithMany(p => p.AliasesHasAttributes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Aliases_has_Attributes_Attributes1");
        });

        modelBuilder.Entity<AliasesHasType>(entity =>
        {
            entity.HasKey(e => new { e.AliasesAliasId, e.TypesTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.AliasesAlias).WithMany(p => p.AliasesHasTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Aliases_has_Types_Aliases1");

            entity.HasOne(d => d.TypesType).WithMany(p => p.AliasesHasTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Aliases_has_Types_Types1");
        });

        modelBuilder.Entity<Attribute>(entity =>
        {
            entity.HasKey(e => e.AttributeId).HasName("PRIMARY");

            entity.Property(e => e.AttributeId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PRIMARY");

            entity.Property(e => e.CommentId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");

            entity.HasOne(d => d.Title).WithMany(p => p.Comments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_comments_title_basics1");
        });

        modelBuilder.Entity<Director>(entity =>
        {
            entity.HasKey(e => new { e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.Directors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons1");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.Directors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles1");
        });

        modelBuilder.Entity<Episode>(entity =>
        {
            entity.HasKey(e => e.EpisodeId).HasName("PRIMARY");

            entity.Property(e => e.EpisodeId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");

            entity.HasOne(d => d.TitleIdChildNavigation).WithMany(p => p.EpisodeTitleIdChildNavigations).HasConstraintName("fk_title_episodes_title_basics2");

            entity.HasOne(d => d.TitleIdParentNavigation).WithMany(p => p.EpisodeTitleIdParentNavigations).HasConstraintName("fk_title_episodes_title_basics1");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.HasKey(e => e.GenreId).HasName("PRIMARY");

            entity.Property(e => e.GenreId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");
        });

        modelBuilder.Entity<KnownFor>(entity =>
        {
            entity.HasKey(e => new { e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.KnownFors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons2");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.KnownFors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles2");
        });

        modelBuilder.Entity<Logging>(entity =>
        {
            entity.HasKey(e => e.LoggingId).HasName("PRIMARY");

            entity.Property(e => e.LoggingId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");
            entity.Property(e => e.ExecutedAt).HasDefaultValueSql("now(6)");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.PersonId).HasName("PRIMARY");

            entity.Property(e => e.PersonId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");
        });

        modelBuilder.Entity<Profession>(entity =>
        {
            entity.HasKey(e => e.ProfessionId).HasName("PRIMARY");

            entity.Property(e => e.ProfessionId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");

            entity.HasOne(d => d.Person).WithMany(p => p.Professions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Professions_Persons1");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PRIMARY");

            entity.Property(e => e.RatingId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");

            entity.HasOne(d => d.Title).WithMany(p => p.Ratings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_ratings_title_basics1");
        });

        modelBuilder.Entity<Title>(entity =>
        {
            entity.HasKey(e => e.TitleId).HasName("PRIMARY");

            entity.Property(e => e.TitleId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");
        });

        modelBuilder.Entity<TitlesHasGenre>(entity =>
        {
            entity.HasKey(e => new { e.TitlesTitleId, e.GenresGenreId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.GenresGenre).WithMany(p => p.TitlesHasGenres)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Genres_Genres1");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.TitlesHasGenres)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Genres_Titles1");
        });

        modelBuilder.Entity<Type>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PRIMARY");

            entity.Property(e => e.TypeId).HasDefaultValueSql("uuid_to_bin(uuid(),1)");
        });

        modelBuilder.Entity<Writer>(entity =>
        {
            entity.HasKey(e => new { e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.Writers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons4");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.Writers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles4");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}