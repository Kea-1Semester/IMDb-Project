// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SeedData.Models;

public partial class ImdbContext : DbContext
{
    public ImdbContext(DbContextOptions<ImdbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<NameBasic> NameBasics { get; set; }

    public virtual DbSet<TitleAka> TitleAkas { get; set; }

    public virtual DbSet<TitleAttribute> TitleAttributes { get; set; }

    public virtual DbSet<TitleBasic> TitleBasics { get; set; }

    public virtual DbSet<TitleComment> TitleComments { get; set; }

    public virtual DbSet<TitleEpisode> TitleEpisodes { get; set; }

    public virtual DbSet<TitleGenre> TitleGenres { get; set; }

    public virtual DbSet<TitlePrincipal> TitlePrincipals { get; set; }

    public virtual DbSet<TitleRating> TitleRatings { get; set; }

    public virtual DbSet<TitleType> TitleTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb3_general_ci")
            .HasCharSet("utf8mb3");

        modelBuilder.Entity<NameBasic>(entity =>
        {
            entity.HasKey(e => e.Nconst).HasName("PRIMARY");

            entity.HasMany(d => d.Tconsts).WithMany(p => p.Nconsts)
                .UsingEntity<Dictionary<string, object>>(
                    "TitleCrew",
                    r => r.HasOne<TitleBasic>().WithMany()
                        .HasForeignKey("Tconst")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_name_basics_has_title_basics_title_basics1"),
                    l => l.HasOne<NameBasic>().WithMany()
                        .HasForeignKey("Nconst")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_name_basics_has_title_basics_name_basics1"),
                    j =>
                    {
                        j.HasKey("Nconst", "Tconst")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("title_crew");
                        j.HasIndex(new[] { "Nconst" }, "fk_name_basics_has_title_basics_name_basics1_idx");
                        j.HasIndex(new[] { "Tconst" }, "fk_name_basics_has_title_basics_title_basics1_idx");
                        j.IndexerProperty<string>("Nconst")
                            .HasMaxLength(100)
                            .HasColumnName("nconst");
                        j.IndexerProperty<string>("Tconst")
                            .HasMaxLength(100)
                            .HasColumnName("tconst");
                    });
        });

        modelBuilder.Entity<TitleAka>(entity =>
        {
            entity.HasKey(e => e.IdAkas).HasName("PRIMARY");

            entity.HasOne(d => d.TconstNavigation).WithMany(p => p.TitleAkas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_akas_title_basics");
        });

        modelBuilder.Entity<TitleAttribute>(entity =>
        {
            entity.HasKey(e => e.IdAttribute).HasName("PRIMARY");

            entity.HasMany(d => d.IdAkas).WithMany(p => p.IdAttributes)
                .UsingEntity<Dictionary<string, object>>(
                    "TitleAkasAttribute",
                    r => r.HasOne<TitleAka>().WithMany()
                        .HasForeignKey("IdAkas")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_title_attributes_has_title_akas_title_akas1"),
                    l => l.HasOne<TitleAttribute>().WithMany()
                        .HasForeignKey("IdAttribute")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_title_attributes_has_title_akas_title_attributes1"),
                    j =>
                    {
                        j.HasKey("IdAttribute", "IdAkas")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("title_akas_attributes");
                        j.HasIndex(new[] { "IdAkas" }, "fk_title_attributes_has_title_akas_title_akas1_idx");
                        j.HasIndex(new[] { "IdAttribute" }, "fk_title_attributes_has_title_akas_title_attributes1_idx");
                        j.IndexerProperty<int>("IdAttribute").HasColumnName("id_attribute");
                        j.IndexerProperty<int>("IdAkas").HasColumnName("id_akas");
                    });
        });

        modelBuilder.Entity<TitleBasic>(entity =>
        {
            entity.HasKey(e => e.Tconst).HasName("PRIMARY");
        });

        modelBuilder.Entity<TitleComment>(entity =>
        {
            entity.HasKey(e => e.IdComment).HasName("PRIMARY");

            entity.HasOne(d => d.TconstNavigation).WithMany(p => p.TitleComments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_comments_title_basics1");
        });

        modelBuilder.Entity<TitleEpisode>(entity =>
        {
            entity.HasKey(e => new { e.ParentTconst, e.Tconst })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.ParentTconstNavigation).WithMany(p => p.TitleEpisodeParentTconstNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_episodes_title_basics2");

            entity.HasOne(d => d.TconstNavigation).WithMany(p => p.TitleEpisodeTconstNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_episodes_title_basics1");
        });

        modelBuilder.Entity<TitleGenre>(entity =>
        {
            entity.HasKey(e => e.IdGenre).HasName("PRIMARY");

            entity.HasMany(d => d.Tconsts).WithMany(p => p.IdGenres)
                .UsingEntity<Dictionary<string, object>>(
                    "TitleBasicsGenre",
                    r => r.HasOne<TitleBasic>().WithMany()
                        .HasForeignKey("Tconst")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_title_genres_has_title_basics_title_basics1"),
                    l => l.HasOne<TitleGenre>().WithMany()
                        .HasForeignKey("IdGenre")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_title_genres_has_title_basics_title_genres1"),
                    j =>
                    {
                        j.HasKey("IdGenre", "Tconst")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("title_basics_genres");
                        j.HasIndex(new[] { "Tconst" }, "fk_title_genres_has_title_basics_title_basics1_idx");
                        j.HasIndex(new[] { "IdGenre" }, "fk_title_genres_has_title_basics_title_genres1_idx");
                        j.IndexerProperty<int>("IdGenre").HasColumnName("id_genre");
                        j.IndexerProperty<string>("Tconst")
                            .HasMaxLength(100)
                            .HasColumnName("tconst");
                    });
        });

        modelBuilder.Entity<TitlePrincipal>(entity =>
        {
            entity.HasKey(e => new { e.Nconst, e.Tconst })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasOne(d => d.NconstNavigation).WithMany(p => p.TitlePrincipals)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_principals_name_basics1");

            entity.HasOne(d => d.TconstNavigation).WithMany(p => p.TitlePrincipals)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_principals_title_basics1");
        });

        modelBuilder.Entity<TitleRating>(entity =>
        {
            entity.HasKey(e => e.IdRating).HasName("PRIMARY");

            entity.HasOne(d => d.TconstNavigation).WithMany(p => p.TitleRatings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_ratings_title_basics1");
        });

        modelBuilder.Entity<TitleType>(entity =>
        {
            entity.HasKey(e => e.IdTypes).HasName("PRIMARY");

            entity.HasMany(d => d.IdAkas).WithMany(p => p.IdTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "TitleAkasType",
                    r => r.HasOne<TitleAka>().WithMany()
                        .HasForeignKey("IdAkas")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_title_types_has_title_akas_title_akas1"),
                    l => l.HasOne<TitleType>().WithMany()
                        .HasForeignKey("IdTypes")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_title_types_has_title_akas_title_types1"),
                    j =>
                    {
                        j.HasKey("IdTypes", "IdAkas")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("title_akas_types");
                        j.HasIndex(new[] { "IdAkas" }, "fk_title_types_has_title_akas_title_akas1_idx");
                        j.HasIndex(new[] { "IdTypes" }, "fk_title_types_has_title_akas_title_types1_idx");
                        j.IndexerProperty<int>("IdTypes").HasColumnName("id_types");
                        j.IndexerProperty<int>("IdAkas").HasColumnName("id_akas");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}