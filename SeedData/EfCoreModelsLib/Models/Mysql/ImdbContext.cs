// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EfCoreModelsLib.Models.Mysql;

public partial class ImdbContext : DbContext
{
    public ImdbContext(DbContextOptions<ImdbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actors> Actors { get; set; }

    public virtual DbSet<Aliases> Aliases { get; set; }

    public virtual DbSet<Attributes> Attributes { get; set; }

    public virtual DbSet<Comments> Comments { get; set; }

    public virtual DbSet<Directors> Directors { get; set; }

    public virtual DbSet<Episodes> Episodes { get; set; }

    public virtual DbSet<Genres> Genres { get; set; }

    public virtual DbSet<KnownFor> KnownFor { get; set; }

    public virtual DbSet<Loggings> Loggings { get; set; }

    public virtual DbSet<Persons> Persons { get; set; }

    public virtual DbSet<Professions> Professions { get; set; }

    public virtual DbSet<Ratings> Ratings { get; set; }

    public virtual DbSet<Titles> Titles { get; set; }

    public virtual DbSet<Types> Types { get; set; }

    public virtual DbSet<Writers> Writers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb3_general_ci")
            .HasCharSet("utf8mb3");

        modelBuilder.Entity<Actors>(entity =>
        {
            entity.HasKey(e => new { e.ActorId, e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.Property(e => e.ActorId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.Actors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons3");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.Actors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles3");
        });

        modelBuilder.Entity<Aliases>(entity =>
        {
            entity.HasKey(e => e.AliasId).HasName("PRIMARY");

            entity.Property(e => e.AliasId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.TitleNavigation).WithMany(p => p.Aliases)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_akas_title_basics");

            entity.HasMany(d => d.AttributesAttribute).WithMany(p => p.AliasesAlias)
                .UsingEntity<Dictionary<string, object>>(
                    "AliasesHasAttributes",
                    r => r.HasOne<Attributes>().WithMany()
                        .HasForeignKey("AttributesAttributeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_Aliases_has_Attributes_Attributes1"),
                    l => l.HasOne<Aliases>().WithMany()
                        .HasForeignKey("AliasesAliasId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_Aliases_has_Attributes_Aliases1"),
                    j =>
                    {
                        j.HasKey("AliasesAliasId", "AttributesAttributeId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("Aliases_has_Attributes");
                        j.HasIndex(new[] { "AliasesAliasId" }, "fk_Aliases_has_Attributes_Aliases1_idx");
                        j.HasIndex(new[] { "AttributesAttributeId" }, "fk_Aliases_has_Attributes_Attributes1_idx");
                        j.IndexerProperty<Guid>("AliasesAliasId").HasColumnName("Aliases_alias_id");
                        j.IndexerProperty<Guid>("AttributesAttributeId").HasColumnName("Attributes_attribute_id");
                    });

            entity.HasMany(d => d.TypesType).WithMany(p => p.AliasesAlias)
                .UsingEntity<Dictionary<string, object>>(
                    "AliasesHasTypes",
                    r => r.HasOne<Types>().WithMany()
                        .HasForeignKey("TypesTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_Aliases_has_Types_Types1"),
                    l => l.HasOne<Aliases>().WithMany()
                        .HasForeignKey("AliasesAliasId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_Aliases_has_Types_Aliases1"),
                    j =>
                    {
                        j.HasKey("AliasesAliasId", "TypesTypeId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("Aliases_has_Types");
                        j.HasIndex(new[] { "AliasesAliasId" }, "fk_Aliases_has_Types_Aliases1_idx");
                        j.HasIndex(new[] { "TypesTypeId" }, "fk_Aliases_has_Types_Types1_idx");
                        j.IndexerProperty<Guid>("AliasesAliasId").HasColumnName("Aliases_alias_id");
                        j.IndexerProperty<Guid>("TypesTypeId").HasColumnName("Types_type_id");
                    });
        });

        modelBuilder.Entity<Attributes>(entity =>
        {
            entity.HasKey(e => e.AttributeId).HasName("PRIMARY");

            entity.Property(e => e.AttributeId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");
        });

        modelBuilder.Entity<Comments>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PRIMARY");

            entity.Property(e => e.CommentId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.Title).WithMany(p => p.Comments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_comments_title_basics1");
        });

        modelBuilder.Entity<Directors>(entity =>
        {
            entity.HasKey(e => new { e.DirectorsId, e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.Property(e => e.DirectorsId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.Directors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons1");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.Directors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles1");
        });

        modelBuilder.Entity<Episodes>(entity =>
        {
            entity.HasKey(e => e.EpisodeId).HasName("PRIMARY");

            entity.Property(e => e.EpisodeId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.TitleIdChildNavigation).WithMany(p => p.EpisodesTitleIdChildNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_episodes_title_basics2");

            entity.HasOne(d => d.TitleIdParentNavigation).WithMany(p => p.EpisodesTitleIdParentNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_episodes_title_basics1");
        });

        modelBuilder.Entity<Genres>(entity =>
        {
            entity.HasKey(e => e.GenreId).HasName("PRIMARY");

            entity.Property(e => e.GenreId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");
        });

        modelBuilder.Entity<KnownFor>(entity =>
        {
            entity.HasKey(e => new { e.KnownForId, e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.Property(e => e.KnownForId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.KnownFor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons2");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.KnownFor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles2");
        });

        modelBuilder.Entity<Loggings>(entity =>
        {
            entity.HasKey(e => e.LoggingId).HasName("PRIMARY");

            entity.Property(e => e.LoggingId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");
            entity.Property(e => e.ExecutedAt).HasDefaultValueSql("CURRENT_TIMESTAMP(6)");
        });

        modelBuilder.Entity<Persons>(entity =>
        {
            entity.HasKey(e => e.PersonId).HasName("PRIMARY");

            entity.Property(e => e.PersonId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");
        });

        modelBuilder.Entity<Professions>(entity =>
        {
            entity.HasKey(e => e.ProfessionId).HasName("PRIMARY");

            entity.Property(e => e.ProfessionId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.Person).WithMany(p => p.Professions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Professions_Persons1");
        });

        modelBuilder.Entity<Ratings>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PRIMARY");

            entity.Property(e => e.RatingId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.Title).WithMany(p => p.Ratings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_title_ratings_title_basics1");
        });

        modelBuilder.Entity<Titles>(entity =>
        {
            entity.HasKey(e => e.TitleId).HasName("PRIMARY");

            entity.Property(e => e.TitleId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasMany(d => d.GenresGenre).WithMany(p => p.TitlesTitle)
                .UsingEntity<Dictionary<string, object>>(
                    "TitlesHasGenres",
                    r => r.HasOne<Genres>().WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_Titles_has_Genres_Genres1"),
                    l => l.HasOne<Titles>().WithMany()
                        .HasForeignKey("TitlesTitleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_Titles_has_Genres_Titles1"),
                    j =>
                    {
                        j.HasKey("TitlesTitleId", "GenresGenreId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("Titles_has_Genres");
                        j.HasIndex(new[] { "GenresGenreId" }, "fk_Titles_has_Genres_Genres1_idx");
                        j.HasIndex(new[] { "TitlesTitleId" }, "fk_Titles_has_Genres_Titles1_idx");
                        j.IndexerProperty<Guid>("TitlesTitleId").HasColumnName("Titles_title_id");
                        j.IndexerProperty<Guid>("GenresGenreId").HasColumnName("Genres_genre_id");
                    });
        });

        modelBuilder.Entity<Types>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PRIMARY");

            entity.Property(e => e.TypeId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");
        });

        modelBuilder.Entity<Writers>(entity =>
        {
            entity.HasKey(e => new { e.WritersId, e.TitlesTitleId, e.PersonsPersonId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.Property(e => e.WritersId).HasDefaultValueSql("(uuid_to_bin(uuid(),1))");

            entity.HasOne(d => d.PersonsPerson).WithMany(p => p.Writers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Persons4");

            entity.HasOne(d => d.TitlesTitle).WithMany(p => p.Writers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Titles_has_Persons_Titles4");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}